/*
 *
 *  Copyright (c) Microsoft. All rights reserved.
 *  Licensed under the MIT license. See LICENSE file in the project root for full license information.
 *
 */

package com.microsoft.azure.sdk.iot.provisioning.security.hsm;

import com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderX509;

import java.security.Key;
import java.security.cert.X509Certificate;
import java.util.Collection;

public class SecurityProviderX509Cert extends SecurityProviderX509
{
    private static final String CN = "CN=";
    private static final String COMMA = ",";
    private static final String EQUALS = "=";

    private final String commonNameLeaf;
    private final X509Certificate leafCertificatePublic;
    private final Key leafPrivateKey;
    private final Collection<X509Certificate> signerCertificates;

    /**
     * Constructor to build the DICE certs from the simulator
     */
    public SecurityProviderX509Cert(X509Certificate leafCertificatePublic, Key leafPrivateKey, Collection<X509Certificate> signerCertificates)
    {
        if (leafCertificatePublic == null)
        {
            throw new IllegalArgumentException("leaf public certificate cannot be null");
        }

        if (leafPrivateKey == null)
        {
            throw new IllegalArgumentException("leaf private key cannot be null");
        }

        this.leafCertificatePublic = leafCertificatePublic;
        this.leafPrivateKey = leafPrivateKey;
        this.signerCertificates = signerCertificates;
        this.commonNameLeaf = this.getCommonName(this.leafCertificatePublic);
    }

    private String getCommonName(X509Certificate certificate)
    {
        //Expected format CN=<CNName>,O=<>,C=<US>
        String cnName = certificate.getSubjectDN().getName();
        String[] tokens = cnName.split(COMMA);
        for (String token : tokens)
        {
            if (token.contains(CN))
            {
                String[] cn = token.split(EQUALS);
                return cn[cn.length - 1];
            }
        }

        throw new IllegalArgumentException("CN name could not be found");
    }

     /**
     * Getter for the common name
     * @return The common name for the root cert
     */
    @Override
    public String getClientCertificateCommonName()
    {
        //SRS_SecurityClientDiceEmulator_25_005: [ This method shall return Leaf certificate name as common name ]
        return this.commonNameLeaf;
    }

    /**
     * Getter for the Alias certificate
     * @return Alias certificate
     */
    @Override
    public X509Certificate getClientCertificate()
    {
        //SRS_SecurityClientDiceEmulator_25_006: [ This method shall return Alias certificate generated by DICE ]
        return this.leafCertificatePublic;
    }

    /**
     * Getter for Alias key
     * @return Alias private key
     */
    @Override
    public Key getClientPrivateKey()
    {
        //SRS_SecurityClientDiceEmulator_25_007: [ This method shall return Alias private key generated by DICE ]
        return this.leafPrivateKey;
    }

    /**
     * Getter for the signer cert
     * @return Signer cert
     */
    public Collection<X509Certificate> getIntermediateCertificatesChain()
    {
        return this.signerCertificates;
    }
}
