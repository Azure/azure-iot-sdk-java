name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

jobs:
  ### Windows ###
  - job: Windows
    timeoutInMinutes: 180
    pool:
      name: Hosted VS2017
    displayName: Windows
    condition: succeeded()
    steps:
      - powershell: ./vsts/echo_versions.ps1
        displayName: 'Echo Versions'
        env:
          COMMIT_FROM: $(COMMIT_FROM)
        condition: always()

      - powershell: ./vsts/start_tpm_windows.ps1
        displayName: 'Start TPM Simulator'
        env:
          COMMIT_FROM: $(COMMIT_FROM)
        condition: always()

      - powershell: ./vsts/build_repo.ps1
        displayName: 'Build and Test'
        env:
          IOT_DPS_CONNECTION_STRING: $(WINDOWS-IOT-DPS-CONNECTION-STRING)
          IOT_DPS_ID_SCOPE: $(WINDOWS-IOT-DPS-ID-SCOPE)
          IOTHUB_CONNECTION_STRING: $(WINDOWS-IOTHUB-CONNECTION-STRING)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          FAR_AWAY_IOTHUB_CONNECTION_STRING: $(FAR-AWAY-IOTHUB-CONNECTION-STRING)
          IS_BASIC_TIER_HUB: $(IS-BASIC-TIER-HUB)
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
        condition: always()

      - task: CopyFiles@2
        displayName: 'Copy Test Results to Artifact Staging Directory'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: |
            **/*.trx
            **/*.xml
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        continueOnError: true
        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact Staging Directory'
        continueOnError: true
        condition: always()

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          mergeTestResults: true
          testRunTitle: "Windows"
        continueOnError: true
        condition: always()

  ### Linux ###
  - job: Linux
    timeoutInMinutes: 180
    pool:
      name: Hosted Ubuntu 1604
    displayName: Linux
    condition: succeeded()
    steps:
      - powershell: ./vsts/echo_versions.ps1
        displayName: 'Echo Versions'
        env:
          COMMIT_FROM: $(COMMIT_FROM)
        condition: always()

      - task: Docker@1
        displayName: 'Start TPM Simulator'
        inputs:
          containerregistrytype: 'Container Registry'
          command: 'Run an image'
          imageName: aziotbld/testtpm
          containerName: 'testtpm-instance'
          ports: |
            127.0.0.1:2321:2321
            127.0.0.1:2322:2322
          restartPolicy: unlessStopped

      - powershell: ./vsts/build_repo.ps1
        displayName: 'Build and Test'
        env:
          IOT_DPS_CONNECTION_STRING: $(LINUX-IOT-DPS-CONNECTION-STRING)
          IOT_DPS_ID_SCOPE: $(LINUX-IOT-DPS-ID-SCOPE)
          IOTHUB_CONNECTION_STRING: $(LINUX-IOTHUB-CONNECTION-STRING)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          FAR_AWAY_IOTHUB_CONNECTION_STRING: $(FAR-AWAY-IOTHUB-CONNECTION-STRING)
          IS_BASIC_TIER_HUB: $(IS-BASIC-TIER-HUB)
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
        condition: always()

      - task: CopyFiles@2
        displayName: 'Copy Test Results to Artifact Staging Directory'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: |
            **/*.trx
            **/*.xml
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        continueOnError: true
        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact Staging Directory'
        continueOnError: true
        condition: always()

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          mergeTestResults: true
          testRunTitle: "Linux"
        continueOnError: true
        condition: always()

