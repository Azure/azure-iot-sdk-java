/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.sdk.iot.digitaltwin.service.generated;

import com.microsoft.azure.sdk.iot.digitaltwin.service.generated.models.DigitalTwinGetDigitalTwinModelHeaders;
import com.microsoft.azure.sdk.iot.digitaltwin.service.generated.models.DigitalTwinGetInterfaceHeaders;
import com.microsoft.azure.sdk.iot.digitaltwin.service.generated.models.DigitalTwinGetInterfacesHeaders;
import com.microsoft.azure.sdk.iot.digitaltwin.service.generated.models.DigitalTwinInterfacesPatch;
import com.microsoft.azure.sdk.iot.digitaltwin.service.generated.models.DigitalTwinInvokeInterfaceCommandHeaders;
import com.microsoft.azure.sdk.iot.digitaltwin.service.generated.models.DigitalTwinUpdateInterfacesHeaders;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DigitalTwins.
 */
public interface DigitalTwins {
    /**
     * Gets the list of interfaces.
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getInterfaces(String digitalTwinId);

    /**
     * Gets the list of interfaces.
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getInterfacesAsync(String digitalTwinId, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the list of interfaces.
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getInterfacesAsync(String digitalTwinId);

    /**
     * Gets the list of interfaces.
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetInterfacesHeaders>> getInterfacesWithServiceResponseAsync(String digitalTwinId);

    /**
     * Updates desired properties of multiple interfaces.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfacesPatchInfo Multiple interfaces desired properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateInterfaces(String digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo);

    /**
     * Updates desired properties of multiple interfaces.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfacesPatchInfo Multiple interfaces desired properties to update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateInterfacesAsync(String digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates desired properties of multiple interfaces.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfacesPatchInfo Multiple interfaces desired properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateInterfacesAsync(String digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo);

    /**
     * Updates desired properties of multiple interfaces.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfacesPatchInfo Multiple interfaces desired properties to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinUpdateInterfacesHeaders>> updateInterfacesWithServiceResponseAsync(String digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo);
    /**
     * Updates desired properties of multiple interfaces.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfacesPatchInfo Multiple interfaces desired properties to update.
     * @param ifMatch the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateInterfaces(String digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, String ifMatch);

    /**
     * Updates desired properties of multiple interfaces.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfacesPatchInfo Multiple interfaces desired properties to update.
     * @param ifMatch the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateInterfacesAsync(String digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, String ifMatch, final ServiceCallback<Object> serviceCallback);

    /**
     * Updates desired properties of multiple interfaces.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfacesPatchInfo Multiple interfaces desired properties to update.
     * @param ifMatch the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateInterfacesAsync(String digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, String ifMatch);

    /**
     * Updates desired properties of multiple interfaces.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfacesPatchInfo Multiple interfaces desired properties to update.
     * @param ifMatch the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinUpdateInterfacesHeaders>> updateInterfacesWithServiceResponseAsync(String digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, String ifMatch);

    /**
     * Gets the interface of given interfaceId.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces/{interfaceName}".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfaceName The interface name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getInterface(String digitalTwinId, String interfaceName);

    /**
     * Gets the interface of given interfaceId.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces/{interfaceName}".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfaceName The interface name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getInterfaceAsync(String digitalTwinId, String interfaceName, final ServiceCallback<Object> serviceCallback);

    /**
     * Gets the interface of given interfaceId.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces/{interfaceName}".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfaceName The interface name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getInterfaceAsync(String digitalTwinId, String interfaceName);

    /**
     * Gets the interface of given interfaceId.
                 Example URI: "digitalTwins/{digitalTwinId}/interfaces/{interfaceName}".
     *
     * @param digitalTwinId Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId is optional.
     * @param interfaceName The interface name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetInterfaceHeaders>> getInterfaceWithServiceResponseAsync(String digitalTwinId, String interfaceName);

    /**
     * Returns a DigitalTwin model definition for the given id.
     If "expand" is present in the query parameters and id is for a device capability model then it returns
     the capability metamodel with expanded interface definitions.
     *
     * @param modelId Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getDigitalTwinModel(String modelId);

    /**
     * Returns a DigitalTwin model definition for the given id.
     If "expand" is present in the query parameters and id is for a device capability model then it returns
     the capability metamodel with expanded interface definitions.
     *
     * @param modelId Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getDigitalTwinModelAsync(String modelId, final ServiceCallback<Object> serviceCallback);

    /**
     * Returns a DigitalTwin model definition for the given id.
     If "expand" is present in the query parameters and id is for a device capability model then it returns
     the capability metamodel with expanded interface definitions.
     *
     * @param modelId Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getDigitalTwinModelAsync(String modelId);

    /**
     * Returns a DigitalTwin model definition for the given id.
     If "expand" is present in the query parameters and id is for a device capability model then it returns
     the capability metamodel with expanded interface definitions.
     *
     * @param modelId Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinModelHeaders>> getDigitalTwinModelWithServiceResponseAsync(String modelId);
    /**
     * Returns a DigitalTwin model definition for the given id.
     If "expand" is present in the query parameters and id is for a device capability model then it returns
     the capability metamodel with expanded interface definitions.
     *
     * @param modelId Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
     * @param expand Indicates whether to expand the device capability model's interface definitions inline or not.
     This query parameter ONLY applies to Capability model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getDigitalTwinModel(String modelId, Boolean expand);

    /**
     * Returns a DigitalTwin model definition for the given id.
     If "expand" is present in the query parameters and id is for a device capability model then it returns
     the capability metamodel with expanded interface definitions.
     *
     * @param modelId Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
     * @param expand Indicates whether to expand the device capability model's interface definitions inline or not.
     This query parameter ONLY applies to Capability model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getDigitalTwinModelAsync(String modelId, Boolean expand, final ServiceCallback<Object> serviceCallback);

    /**
     * Returns a DigitalTwin model definition for the given id.
     If "expand" is present in the query parameters and id is for a device capability model then it returns
     the capability metamodel with expanded interface definitions.
     *
     * @param modelId Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
     * @param expand Indicates whether to expand the device capability model's interface definitions inline or not.
     This query parameter ONLY applies to Capability model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getDigitalTwinModelAsync(String modelId, Boolean expand);

    /**
     * Returns a DigitalTwin model definition for the given id.
     If "expand" is present in the query parameters and id is for a device capability model then it returns
     the capability metamodel with expanded interface definitions.
     *
     * @param modelId Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
     * @param expand Indicates whether to expand the device capability model's interface definitions inline or not.
     This query parameter ONLY applies to Capability model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinModelHeaders>> getDigitalTwinModelWithServiceResponseAsync(String modelId, Boolean expand);

    /**
     * Invoke a digital twin interface command.
     * Invoke a digital twin interface command.
     *
     * @param digitalTwinId the String value
     * @param interfaceName the String value
     * @param commandName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object invokeInterfaceCommand(String digitalTwinId, String interfaceName, String commandName);

    /**
     * Invoke a digital twin interface command.
     * Invoke a digital twin interface command.
     *
     * @param digitalTwinId the String value
     * @param interfaceName the String value
     * @param commandName the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> invokeInterfaceCommandAsync(String digitalTwinId, String interfaceName, String commandName, final ServiceCallback<Object> serviceCallback);

    /**
     * Invoke a digital twin interface command.
     * Invoke a digital twin interface command.
     *
     * @param digitalTwinId the String value
     * @param interfaceName the String value
     * @param commandName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> invokeInterfaceCommandAsync(String digitalTwinId, String interfaceName, String commandName);

    /**
     * Invoke a digital twin interface command.
     * Invoke a digital twin interface command.
     *
     * @param digitalTwinId the String value
     * @param interfaceName the String value
     * @param commandName the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinInvokeInterfaceCommandHeaders>> invokeInterfaceCommandWithServiceResponseAsync(String digitalTwinId, String interfaceName, String commandName);
    /**
     * Invoke a digital twin interface command.
     * Invoke a digital twin interface command.
     *
     * @param digitalTwinId the String value
     * @param interfaceName the String value
     * @param commandName the String value
     * @param payload the Object value
     * @param connectTimeoutInSeconds Connect timeout in seconds.
     * @param responseTimeoutInSeconds Response timeout in seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object invokeInterfaceCommand(String digitalTwinId, String interfaceName, String commandName, Object payload, Integer connectTimeoutInSeconds, Integer responseTimeoutInSeconds);

    /**
     * Invoke a digital twin interface command.
     * Invoke a digital twin interface command.
     *
     * @param digitalTwinId the String value
     * @param interfaceName the String value
     * @param commandName the String value
     * @param payload the Object value
     * @param connectTimeoutInSeconds Connect timeout in seconds.
     * @param responseTimeoutInSeconds Response timeout in seconds.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> invokeInterfaceCommandAsync(String digitalTwinId, String interfaceName, String commandName, Object payload, Integer connectTimeoutInSeconds, Integer responseTimeoutInSeconds, final ServiceCallback<Object> serviceCallback);

    /**
     * Invoke a digital twin interface command.
     * Invoke a digital twin interface command.
     *
     * @param digitalTwinId the String value
     * @param interfaceName the String value
     * @param commandName the String value
     * @param payload the Object value
     * @param connectTimeoutInSeconds Connect timeout in seconds.
     * @param responseTimeoutInSeconds Response timeout in seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> invokeInterfaceCommandAsync(String digitalTwinId, String interfaceName, String commandName, Object payload, Integer connectTimeoutInSeconds, Integer responseTimeoutInSeconds);

    /**
     * Invoke a digital twin interface command.
     * Invoke a digital twin interface command.
     *
     * @param digitalTwinId the String value
     * @param interfaceName the String value
     * @param commandName the String value
     * @param payload the Object value
     * @param connectTimeoutInSeconds Connect timeout in seconds.
     * @param responseTimeoutInSeconds Response timeout in seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DigitalTwinInvokeInterfaceCommandHeaders>> invokeInterfaceCommandWithServiceResponseAsync(String digitalTwinId, String interfaceName, String commandName, Object payload, Integer connectTimeoutInSeconds, Integer responseTimeoutInSeconds);

}
